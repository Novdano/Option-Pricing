new_vecs <- grid_search_SV(oldA, deltaA)
newA <- new_vecs[[1]]
deltaA<- new_vecs[[2]]
}
grid_search_SABR <- function(alpha, deltaA){
min <- MSFT_Opt_SABR(c(alpha, 1, 0.3, 0.4))
minA <- alpha
for(da in c(-deltaA, 0, deltaA)){
curr <- MSFT_Opt_SABR(c(alpha+da, 1, 0.3, 0.4))
if (curr<min){
min <- curr
minA <- alpha + da
}
}
if (minA == alpha){
deltaA <- deltaA/2
}
return (c(alpha, deltaA))
}
oldA <- 0.5
newA <- 0.5
deltaA <- 0.01
new_vecs<-c(2,1)
while (deltaA>0.0001){
oldA <- newA
new_vecs <- grid_search_SABR(oldA, deltaA)
newA <- new_vecs[[1]]
deltaA<- new_vecs[[2]]
}
print(newA)
grid_search_SABR <- function(alpha, deltaA){
min <- MSFT_Opt_SABR(c(alpha, 1, 0.3, 0.4))
minA <- alpha
for(da in c(-deltaA, 0, deltaA)){
curr <- MSFT_Opt_SABR(c(alpha+da, 1, 0.3, 0.4))
if (curr<min){
min <- curr
minA <- alpha + da
}
}
if (minA == alpha){
deltaA <- deltaA/2
}
return (c(alpha, deltaA))
}
oldA <- 0.5
newA <- 0.5
deltaA <- 0.01
new_vecs<-c(2,1)
while (deltaA>0.0001){
oldA <- newA
new_vecs <- grid_search_SABR(oldA, deltaA)
newA <- new_vecs[[1]]
deltaA<- new_vecs[[2]]
print(newA)
print(deltaA)
}
print(newA)
grid_search_SABR <- function(alpha, deltaA){
min <- MSFT_Opt_SABR(c(alpha, 1, 0.3, 0.4))
minA <- alpha
for(da in c(-deltaA, 0, deltaA)){
curr <- MSFT_Opt_SABR(c(alpha+da, 1, 0.3, 0.4))
if (curr<min){
min <- curr
minA <- alpha + da
}
}
if (minA == alpha){
deltaA <- deltaA/2
}
return (c(alpha, deltaA))
}
oldA <- 0.3
newA <- 0.3
deltaA <- 0.01
new_vecs<-c(2,1)
while (deltaA>0.0001){
oldA <- newA
new_vecs <- grid_search_SABR(oldA, deltaA)
newA <- new_vecs[[1]]
deltaA<- new_vecs[[2]]
print(newA)
print(deltaA)
}
print(newA)
grid_search_SABR <- function(alpha, deltaA){
min <- MSFT_Opt_SABR(c(alpha, 1, 0.3, 0.4))
minA <- alpha
for(da in c(-deltaA, 0, deltaA)){
curr <- MSFT_Opt_SABR(c(alpha+da, 1, 0.3, 0.4))
if (curr<min){
min <- curr
minA <- alpha + da
}
}
if (minA == alpha){
deltaA <- deltaA/2
}
return (c(minA, deltaA))
}
oldA <- 0.3
newA <- 0.3
deltaA <- 0.01
new_vecs<-c(2,1)
while (deltaA>0.0001){
oldA <- newA
new_vecs <- grid_search_SABR(oldA, deltaA)
newA <- new_vecs[[1]]
deltaA<- new_vecs[[2]]
print(newA)
print(deltaA)
}
print(newA)
grid_search_SABR <- function(alpha, deltaA){
min <- MSFT_Opt_SABR(c(alpha, 1, 0.3, 0.4))
minA <- alpha
for(da in c(-deltaA, 0, deltaA)){
curr <- MSFT_Opt_SABR(c(alpha+da, 1, 0.3, 0.4))
if (curr<min){
min <- curr
minA <- alpha + da
}
}
if (minA == alpha){
deltaA <- deltaA/2
}
return (c(minA, deltaA))
}
oldA <- 0.5
newA <- 0.5
deltaA <- 0.01
new_vecs<-c(2,1)
while (deltaA>0.0001){
oldA <- newA
new_vecs <- grid_search_SABR(oldA, deltaA)
newA <- new_vecs[[1]]
deltaA<- new_vecs[[2]]
print(newA)
print(deltaA)
}
print(newA)
seq(0,0.1,1)
seq(0,1,0.1)
seq(0,1,0.1)
alphas <- seq(0,1,0.1)
grad <- rep(0,length(alphas))
for(i in 1:length(alphas)){
grad[[i]] <-  MSFT_Opt_SABR(c(alphas[[i]], 1, 0.3, 0.4))
}
plot(alphas, grad)
alphas <- seq(0,1,0.1)
Err <- rep(0,length(alphas))
for(i in 1:length(alphas)){
Err[[i]] <-  MSFT_Opt_SABR(c(alphas[[i]], 1, 0.3, 0.4))
}
plot(alphas, Err, "l")
alphas <- seq(0,1,0.01)
Err <- rep(0,length(alphas))
for(i in 1:length(alphas)){
Err[[i]] <-  MSFT_Opt_SABR(c(alphas[[i]], 1, 0.3, 0.4))
}
plot(alphas, Err, "l")
grid_search_SABR <- function(alpha, deltaA){
min <- MSFT_Opt_SABR(c(alpha, 1, 0.3, 0.4))
minA <- alpha
for(da in c(-deltaA, 0, deltaA)){
curr <- MSFT_Opt_SABR(c(alpha+da, 1, 0.3, 0.4))
if (curr<min){
min <- curr
minA <- alpha + da
}
}
if (minA == alpha){
deltaA <- deltaA/2
}
return (c(minA, deltaA))
}
oldA <- 0.2
newA <- 0.2
deltaA <- 0.01
new_vecs<-c(2,1)
while (deltaA>0.0001){
oldA <- newA
new_vecs <- grid_search_SABR(oldA, deltaA)
newA <- new_vecs[[1]]
deltaA<- new_vecs[[2]]
print(newA)
print(deltaA)
}
print(newA)
alphas <- seq(0,1,0.01)
Err <- rep(0,length(alphas))
for(i in 1:length(alphas)){
Err[[i]] <-  MSFT_Opt_SABR(c(alphas[[i]], 1, 0.3, 0.4))
}
minI <- which.min(Err)
alphas[minI]
plot(alphas, Err, "l")
MSFT_Opt_SABR(c(0.19875, 1, 0.3, 0.4)
)
MSFT_Opt_SABR(c(2, 1, 0.3, 0.4))
MSFT_Opt_SABR(c(0.2, 1, 0.3, 0.4))
grid_search_SV <- function(kappa, theta, deltaK, deltaT){
min <- MSFT_Opt_SV(c(kappa, theta, 0.001, -0.2))
minK <- kappa
minT <- theta
for(dk in c(-deltaK, 0, deltaK)){
for (dt in c(-deltaT, 0, deltaT)){
curr <- MSFT_Opt_SV(c(kappa + dk, theta + dt, 0.001, -0.2))
if (curr<min){
if (kappa + dk >0 && theta + dt >0){
min <- curr
minK <- kappa + dk
minT <- theta + dt
}
}
}
}
if (minK == kappa && minT == theta){
deltaK <- deltaK/2
deltaT <- deltaT/2
}
return (c(minK, minT,deltaK, deltaT))
}
oldk <- 0.5
oldt <- 0.7
newk <- 0.5
newt<- 0.7
deltaK <- 0.01
deltaT <- 0.01
new_vecs<-c(2,1)
while (deltaK>0.0001 && deltaT > 0.0001){
oldk<-newk
oldt<-newt
old_vecs <- c(oldk, oldt, oldm, oldr)
new_vecs <- grid_search_SV(oldk, oldt, deltaK, deltaT)
newk<- new_vecs[[1]]
newt <- new_vecs[[2]]
deltaK <- new_vecs[[3]]
deltaT <- new_vecs[[4]]
}
print(newk)
print(newt)
SV_prices <- reps(0,length(K))
SV_prices <- rep(0,length(K))
IV <- rep(0,length(K))
for (i in 1:length(K)){
SV_prices[[i]] <- callHestoncf(S, K[[i]], 1/3, 0.02, 0 ,0.04, theta, -0.2, 0.00625, 0.02578125, 0.001)
IV <- Newton_Rhapson_Call(S, SV_prices[[i]], K[[i]], 0.02, 1/3)
}
SV_prices <- rep(0,length(K))
IV <- rep(0,length(K))
for (i in 1:length(K)){
SV_prices[[i]] <- callHestoncf(S, K[[i]], 1/3, 0.02, 0 ,0.04, 0.02578125, -0.2, 0.00625, 0.001)
IV <- Newton_Rhapson_Call(S, SV_prices[[i]], K[[i]], 0.02, 1/3)
}
plot(K, IV, "l")
SV_prices <- rep(0,length(K))
IV <- rep(0,length(K))
for (i in 1:length(K)){
SV_prices[[i]] <- callHestoncf(S, K[[i]], 1/3, 0.02, 0 ,0.04, 0.02578125, -0.2, 0.00625, 0.001)
IV <- Newton_Rhapson_Call(S, SV_prices[[i]], K[[i]], 0.02, 1/3)
}
print(IV)
plot(K, IV, "l")
SV_prices <- rep(0,length(K))
IV <- rep(0,length(K))
for (i in 1:length(K)){
SV_prices[[i]] <- callHestoncf(S, K[[i]], 1/3, 0.02, 0 ,0.04, 0.02578125, -0.2, 0.00625, 0.001)
IV[[i]] <- Newton_Rhapson_Call(S, SV_prices[[i]], K[[i]], 0.02, 1/3)
}
print(IV)
plot(K, IV, "l")
grid_search_SABR <- function(alpha, deltaA){
min <- MSFT_Opt_SABR(c(alpha, 1, 0.3, 0.4))
minA <- alpha
for(da in c(-deltaA, 0, deltaA)){
curr <- MSFT_Opt_SABR(c(alpha+da, 1, -0.2, 0.4))
if (curr<min){
min <- curr
minA <- alpha + da
}
}
if (minA == alpha){
deltaA <- deltaA/2
}
return (c(minA, deltaA))
}
oldA <- 0.2
newA <- 0.2
deltaA <- 0.01
new_vecs<-c(2,1)
while (deltaA>0.0001){
oldA <- newA
new_vecs <- grid_search_SABR(oldA, deltaA)
newA <- new_vecs[[1]]
deltaA<- new_vecs[[2]]
print(newA)
print(deltaA)
}
print(newA)
alphas <- seq(0,1,0.01)
Err <- rep(0,length(alphas))
for(i in 1:length(alphas)){
Err[[i]] <-  MSFT_Opt_SABR(c(alphas[[i]], 1, -0.2, 0.4))
}
minI <- which.min(Err)
alphas[minI]
plot(alphas, Err, "l")
SABR_prices <- rep(0,length(K))
IV <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4 )
IV[[i]] <- Newton_Rhapson_Call(S, SV_prices[[i]], K[[i]], 0.02, 1/3)
}
SABR_prices <- rep(0,length(K))
IV <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 100, 100)
IV[[i]] <- Newton_Rhapson_Call(S, SV_prices[[i]], K[[i]], 0.02, 1/3)
}
print(IV)
plot(K, IV, "l")
SABR_prices <- rep(0,length(K))
IV <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 100, 100)
IV[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
}
print(IV)
plot(K, IV, "l")
SABR_prices <- rep(0,length(K))
IV <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 1000, 1000)
IV[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
}
print(IV)
plot(K, IV, "l")
SABR_prices <- rep(0,length(K))
IV <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 10000, 10000)
IV[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
}
print(IV)
plot(K, IV, "l")
grid_search_dummy <- function(kappa, theta, deltaK, deltaT){
min <- dummy_opt(c(kappa, theta, deltaK, deltaT))
minK <- kappa
minT <- theta
for(dk in c(-deltaK, 0, deltaK)){
for (dt in c(-deltaT, 0, deltaT)){
curr <- dummy_opt(c(kappa + dk, theta + dt, 0.001, -0.2))
if (curr<min){
min <- curr
minK <- kappa + dk
minT <- theta + dt
}
}
}
if (minK == kappa && minT == theta){
deltaK <- deltaK/2
deltaT <- deltaT/2
}
return (c(minK, minT,deltaK, deltaT))
}
#Check effectiveness of grid_search
dummy_opt <- function(param_vectors){
a <- param_vectors[[1]]
theta <- param_vectors[[2]]
miu <- param_vectors[[3]]
rho<- param_vectors[[4]]
kappa <- (a + miu^2)/(2*theta)
sv_est = rep(0, length(stock_px))
for (i in 1:length(stock_px)){
sv_est[[i]] <- callHestoncf(stock_px[[i]], 190, 1/12, 0.02,0,0.04, theta, rho, kappa, miu)
}
return (MSE(sv_est, shortT_px))
}
kappa <- 0.3
theta <- 0.02
strikes <- c(90,95,100,105,110)
px <- rep(0,length(strikes))
for (i in 1:length(strikes)){
px[[i]] <- callHestoncf(100, strikes[[i]], 1/12, 0.02,0,0.04, theta, -0.2, kappa, 0.01)
}
oldk <- 0.5
oldt <- 0.4
newk <- 0.3
newt<- 0.4
deltaK <- 0.01
deltaT <- 0.01
new_vecs<-c(2,1)
while (deltaK>0.0001 && deltaT > 0.0001){
oldk<-newk
oldt<-newt
old_vecs <- c(oldk, oldt, oldm, oldr)
new_vecs <- grid_search(oldk, oldt, deltaK, deltaT)
newk<- new_vecs[[1]]
newt <- new_vecs[[2]]
deltaK <- new_vecs[[3]]
deltaT <- new_vecs[[4]]
print(deltaK)
print(deltaT)
}
print(newk)
print(newt)
SABR_prices
Option_Price <- function(S_0, K, r, sigma, T){
d1 <- (log(S_0/K) + (r + sigma^2/2)*T)/(sigma * sqrt(T))
d2 <- (log(S_0/K) + (r - sigma^2/2)*T)/(sigma * sqrt(T))
res <- S_0 * pnorm(d1) - K*pnorm(d2) * exp(-r * T)
return(res)
}
Vega <- function(S_0, K, r, sigma, T){
d1 <- (log(S_0/K) + (r + sigma^2/2)*T)/(sigma * sqrt(T))
return (S_0 * sqrt(T) * pnorm(d1))
}
Newton_Rhapson_Call <- function(S_0,C_0,K,r,T){
curr_sigma <-100;
diff <- 10000
curr_price <- Option_Price(S_0, K, r, curr_sigma, T)
while (abs(curr_price - C_0)>0.0001) {
curr_sigma <- curr_sigma + ((C_0 - Option_Price(S_0, K, r, curr_sigma, T))/ Vega(S_0, K, r, curr_sigma, T))
curr_price <- Option_Price(S_0, K, r, curr_sigma, T)
}
return(curr_sigma)
}
price <- Option_Price(100,100,0.02, 0.2, 1/3)
IV <- Newton_Rhapson_Call(100, price, 100,0.02,1/3)
IV
Option_Price <- function(S_0, K, r, sigma, T){
d1 <- (log(S_0/K) + (r + sigma^2/2)*T)/(sigma * sqrt(T))
d2 <- (log(S_0/K) + (r - sigma^2/2)*T)/(sigma * sqrt(T))
res <- S_0 * pnorm(d1) - K*pnorm(d2) * exp(-r * T)
return(res)
}
Vega <- function(S_0, K, r, sigma, T){
d1 <- (log(S_0/K) + (r + sigma^2/2)*T)/(sigma * sqrt(T))
return (S_0 * sqrt(T) * pnorm(d1))
}
Newton_Rhapson_Call <- function(S_0,C_0,K,r,T){
curr_sigma <-100;
diff <- 10000
curr_price <- Option_Price(S_0, K, r, curr_sigma, T)
while (abs(curr_price - C_0)>0.0001) {
curr_sigma <- curr_sigma + ((C_0 - Option_Price(S_0, K, r, curr_sigma, T))/ Vega(S_0, K, r, curr_sigma, T))
curr_price <- Option_Price(S_0, K, r, curr_sigma, T)
}
return(curr_sigma)
}
price <- Option_Price(100,100,0.02, 0.2, 1/3)
IV <- Newton_Rhapson_Call(100, price, 100,0.02,1/3)
IV
SABR_prices <- rep(0,length(K))
IV <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 100, 100)
IV[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
}
print(IV)
plot(K, IV, "l")
SABR_prices <- rep(0,length(K))
IV <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 100, 100)
IV[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
}
print(IV)
plot(K, IV, "l")
SABR_prices <- rep(0,length(K))
IV <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 100, 100)
IV[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
}
print(IV)
plot(K, IV, "l")
SABR_prices <- rep(0,length(K))
IV <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 100, 100)
IV[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
}
print(IV)
plot(K, IV, "l")
SABR_prices <- rep(0,length(K))
IV <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 100, 100)
IV[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
}
print(IV)
plot(K, IV, "l")
SABR_prices <- rep(0,length(K))
IV <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 100, 100)
IV[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
}
print(IV)
plot(K, IV, "l")
SABR_prices <- rep(0,length(K))
IV <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 100, 100)
IV[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
}
print(IV)
plot(K, IV, "l")
