} else {
r <- 0.0175
}
new_vol <- c(hist_px[i:length(hist_px)], head(stock_px,i-1))
new_deltaBS <- deltaBS(stock_px[[i]], 100, r, BS_IV, days_left/252)
new_deltaMkt <- delta_atm[[i]]
delta_bs <- new_deltaBS + stock_held_BS[[i-1]]
delta_mkt <- new_deltaMkt + stock_held_mkt[[i-1]]
port_bs <- port_bs - delta_bs * stock_px[[i]]
port_mkt <- port_mkt - delta_mkt * stock_px[[i]]
daily_pnl_bs[[i]] <- -port_bs
daily_pnl_mkt[[i]] <- -port_mkt
deltas_bs[[i]] <- new_deltaBS
stock_held_BS[[i]] <- -delta_bs + stock_held_BS[[i-1]]
stock_held_mkt[[i]] <- -delta_mkt + stock_held_mkt[[i-1]]
}
plot(1:length(stock_px),daily_pnl_mkt,col="red", "l", ylab="PnL", xlab="Time")
lines(1:length(stock_px), daily_pnl_bs, col="green", "l")
legend("topright",
c("Market","BlackScholes"),
fill=c("red","green"))
plot(1:length(stock_px), delta_atm, col="red", "l",ylab="Delta", xlab="Time")
lines(1:length(stock_px), deltas_bs, col="green", "l")
legend("topright",
c("Market","BlackScholes"),
fill=c("red","green"))
plot(1:length(stock_px), stock_held_mkt, col="red", "l",ylab="Stock Held", xlab="Time")
lines(1:length(stock_px), stock_held_BS, col="green", "l")
legend("topright",
c("Market","BlackScholes"),
fill=c("red","green"))
#Long straddle
BS_IV <- sd(hist_returns(hist_px)) * sqrt(252)
delta_bs <- deltaBS(stock_px[[1]], 100, 0.0175, BS_IV, 55/252)
delta_mkt <- delta_BS_atm[[1]]
#current value of portfolio
port_bs <- atm_px[[1]] - delta_bs * stock_px[[1]]
port_mkt <- atm_px[[1]] - delta_mkt * stock_px[[1]]
#daily profit and loss
daily_pnl_bs <- rep(0,length(stock_px))
daily_pnl_mkt <- rep(0,length(stock_px))
daily_pnl_bs[[1]] <- -port_bs
daily_pnl_mkt[[1]] <- -port_mkt
deltas_bs <- rep(0,length(stock_px))
deltas_bs[[1]] <- delta_bs
stock_held_BS <- rep(0,length(stock_px))
stock_held_mkt <- rep(0, length(stock_px))
stock_held_BS[[1]] <- -delta_bs
stock_held_mkt[[1]] <- -delta_mkt
days_left <- 55
for (i in 2:length(stock_px)){
days_skipped <- as.numeric(as.Date(stock[i,1], "%m/%d/%Y") - as.Date(stock[i-1,1], "%m/%d/%Y"))
days_left <- days_left - days_skipped
if (as.Date(stock[i,1], "%m/%d/%Y") > (as.Date("06/14/2018","%m/%d/%Y"))){
r <- 0.02
} else {
r <- 0.0175
}
new_vol <- c(hist_px[i:length(hist_px)], head(stock_px,i-1))
new_deltaBS <- deltaBS(stock_px[[i]], 100, r, BS_IV, days_left/252)
new_deltaMkt <- delta_atm[[i]]
delta_bs <- new_deltaBS + stock_held_BS[[i-1]]
delta_mkt <- new_deltaMkt + stock_held_mkt[[i-1]]
port_bs <- port_bs - delta_bs * stock_px[[i]]
port_mkt <- port_mkt - delta_mkt * stock_px[[i]]
daily_pnl_bs[[i]] <- -port_bs
daily_pnl_mkt[[i]] <- -port_mkt
deltas_bs[[i]] <- new_deltaBS
stock_held_BS[[i]] <- -delta_bs + stock_held_BS[[i-1]]
stock_held_mkt[[i]] <- -delta_mkt + stock_held_mkt[[i-1]]
}
plot(1:length(stock_px),daily_pnl_mkt,col="red", "l", ylab="PnL", xlab="Time")
lines(1:length(stock_px), daily_pnl_bs, col="green", "l")
legend("topright",
c("Market","BlackScholes"),
fill=c("red","green"))
plot(1:length(stock_px), delta_atm, col="red", "l",ylab="Delta", xlab="Time")
lines(1:length(stock_px), deltas_bs, col="green", "l")
legend("topright",
c("Market","BlackScholes"),
fill=c("red","green"))
plot(1:length(stock_px), stock_held_mkt, col="red", "l",ylab="Stock Held", xlab="Time")
lines(1:length(stock_px), stock_held_BS, col="green", "l")
legend("topleft",
c("Market","BlackScholes"),
fill=c("red","green"))
install.packages("plot3D")
plot3D
library("plot3D")
plot3D
plot3D()
install.packages("plot3D")
library("plot3D")
plot3d(c(1:5),c(1:10),c(1,50))
plot3D::contour3D(c(1:5),c(1:10),c(1,50))
library("NMOF")
options = c(7.7,6.4,5.02,2.79,1.42);
K = c(95,97.5,100,105,110);
S = 100;
MSE <- function(vec1, vec2){
ms <- (vec1-vec2)^2
return ((sum(ms))^0.5)/length(vec1)
}
MSFT_Opt_SV <- function(param_vectors){
a <- param_vectors[[1]]
theta <- param_vectors[[2]]
miu <- param_vectors[[3]]
rho<- param_vectors[[4]]
kappa <- (a + miu^2)/(2*theta)
sv_est = rep(0, length(K))
for (i in 1:length(K)){
sv_est[[i]] <- callHestoncf(S, K[[i]], 1/3, 0.02, 0 ,0.04, theta, rho, kappa, miu)
}
return (MSE(sv_est, options))
}
MSFT_Opt_SABR <- function(param_vectors){
alpha <- param_vectors[[1]]
beta <- param_vectors[[2]]
rho <- param_vectors[[3]]
nu<- param_vectors[[4]]
sv_est = rep(0, length(K))
for (i in 1:length(K)){
sv_est[[i]] <- SABR_MC_Call(S,K[[i]], 0.02 ,alpha, beta, rho, nu, 1/3, 100,100)
}
return (MSE(sv_est, options))
}
grid_search_SV <- function(kappa, theta, deltaK, deltaT){
min <- MSFT_Opt_SV(c(kappa, theta, 0.001, -0.2))
minK <- kappa
minT <- theta
for(dk in c(-deltaK, 0, deltaK)){
for (dt in c(-deltaT, 0, deltaT)){
curr <- MSFT_Opt_SV(c(kappa + dk, theta + dt, 0.001, -0.2))
if (curr<min){
if (kappa + dk >0 && theta + dt >0){
min <- curr
minK <- kappa + dk
minT <- theta + dt
}
}
}
}
if (minK == kappa && minT == theta){
deltaK <- deltaK/2
deltaT <- deltaT/2
}
return (c(minK, minT,deltaK, deltaT))
}
oldk <- 0.5
oldt <- 0.7
newk <- 0.5
newt<- 0.7
deltaK <- 0.01
deltaT <- 0.01
new_vecs<-c(2,1)
while (deltaK>0.0001 && deltaT > 0.0001){
oldk<-newk
oldt<-newt
new_vecs <- grid_search_SV(oldk, oldt, deltaK, deltaT)
newk<- new_vecs[[1]]
newt <- new_vecs[[2]]
deltaK <- new_vecs[[3]]
deltaT <- new_vecs[[4]]
}
print(newk)
print(newt)
alphas <- seq(0,1,0.01)
Err <- rep(0,length(alphas))
for(i in 1:length(alphas)){
Err[[i]] <-  MSFT_Opt_SABR(c(alphas[[i]], 1, -0.2, 0.4))
}
SABR_MC_Call <- function(S_0, K, r, alpha_0, beta, rho, nu, T, M, N){
payoff <- 0
for(i in 1:M){
S <- S_0
alpha <- alpha_0
for(n in 1:N){
W1 <- rnorm(1)
W2 <- rnorm(1)
S <- S + r*S*(T/N) + alpha*S^beta*sqrt(T/N)*W1*(exp((-r*(T-n*(T/N)))))^(1-beta)
alpha <- alpha + nu*alpha*(rho * W1 + sqrt(1-rho^2)*W2)*sqrt(T/N)
}
if (S>K){
payoff <- payoff + S-K
}
}
return ((payoff/M) * (1+r*(T/N))^-N)
}
SABR_MC_Call(50,30,0.02,0.4,1,0.3,0.4,1/12,100,100)
SABR_MC_Call(50,30,0.02,0.8,1,0.3,0.4,1/12,100,100)
SABR_MC_Call(50,30,0.02,0.4,1,0.6,0.4,1/12,100,100)
SABR_MC_Call(50,30,0.02,0.4,1,0.3,0.8,1/12,100,100)
IV_SABR <- function(f, K, t, alpha, beta, rho, nu){
first = alpha/((f*K)^((1-beta)/2) *(1 + (((1-beta)^2)/24) *(log(f/K))^2 + ((1-beta^4)/1920)*log(f/K)^4))
z = (nu/alpha) * ((f*K)^((1-beta)/2)) * log(f/K)
chi_z = log((sqrt(1-2*rho*z+z^2) + z - rho)/(1-rho))
last = 1 + (((1-beta)^2/24) * alpha^2/((f*K)^(1-beta)) + (1/4) * ((rho*beta*nu*alpha)/((f*K)^((1-beta)/2))) + ((2-3*rho^2)/24)*nu^2)*t
return (first * (z/chi_z) * last)
}
SABR_prices <- rep(0,length(K))
IV_MC <- rep(0,length(K))
IV_CF <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 10000, 10000)
IV_MC[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
IV_CF[[i]] <- IV_SABR(S  * exp(0.02*(1/3)),K[[i]],1/3, 0.2042188, 1, -0.2, 0.4)
}
library("NMOF")
library("plot3D")
version
update
update(R)
updateR()
install.packages("installr"); library(installr)
updateR()
library("NMOF")
library("plot3D")
plot3D::contour3D(c(1:5), c(1:5), reps(c(1:5), 5))
plot3D::contour3D(c(1:5), c(1:5), rep(c(1:5), 5))
plot3D::contour3D(c(1:5), c(1:5), rep(1:25)
plot3D::contour3D(c(1:5), c(1:5), rep(1:25))
plot3D::contour3D(c(1:5), c(1:5), matrix(c(1:25), nrow = 5, ncol=5))
matrix(c(1:25), nrow = 5, ncol=5)
plot3D::contour3D(c(1:5), c(1:5), 5)
plot3D::contour3D(x=c(1:5), y=c(1:5), z=5)
plot3D::contour3D(x=c(1:5), y=c(1:5), z=5)
install.packages("plotly")
library("NMOF")
library("plotly")
plot_ly
plot_ly(x=c(1,5), y=c(1,5), z=matrix(c(1,25), nrow=5,ncol=5))
plot_ly(x=c(1,5), y=c(1,5), z=matrix(c(1,25), nrow=5,ncol=5), type="mesh3d")
plot_ly(x=c(1:5), y=c(1:5), z=matrix(c(1,25), nrow=5,ncol=5), type="mesh3d")
c(1:5)
plot_ly(x=1:5, y=1:5, z=matrix(c(1,25), nrow=5,ncol=5), type="mesh3d")
plot_ly(x=1:5, y=1:5, z=matrix(c(1:25), nrow=5,ncol=5), type="mesh3d")
p = plot_ly(x=1:5, y=1:5, z=matrix(c(1:25), nrow=5,ncol=5), type="mesh3d")
chart_link = api_create(p, filename="try_plotly")
plot_ly(x=1:5, y=1:5, z=matrix(c(1,25), nrow=5,ncol=5), type="mesh3d")
p
p
plot_ly(x=1:5, y=1:5, z=matrix(c(1,25), nrow=5,ncol=5), type="mesh3d")
plot_ly(x=1:5, y=1:5, z=matrix(c(1,25), nrow=5,ncol=5), type="mesh3d") %>% add_surface()
=matrix(c(1,25), nrow=5,ncol=5)
matrix(c(1,25), nrow=5,ncol=5)
plot_ly(x=1:5, y=1:5, z=matrix(c(1:25), nrow=5,ncol=5), type="mesh3d") %>% add_surface()
c(0.1:3:0.1)
c(0.1:3:0.1)
0.1:0.3:0.1
seq(0.1:0.3:0.1)
seq(0.1,0.3,0.1)
x = matrix(c(1:length(kappas)*length(thetas)), nrow=length(thetas), ncol=length(kappas))
kappas <- seq(0.1,3,0.1)
thetas <- seq(0.1,1,0.1)
errors <- matrix(c(1:length(kappas)*length(thetas)), nrow=length(thetas), ncol=length(kappas))
for (i in 1:length(kappas)){
for (j in 1:length(thetas)){
errors
}
}
plot_ly(x=1:5, y=1:5, z=matrix(c(1:25), nrow=5,ncol=5), type="mesh3d") %>% add_surface()
errors
errors[5,5]
kappas <- seq(0.1,3,0.1)
thetas <- seq(0.1,1,0.1)
errors <- matrix(0, nrow=length(thetas), ncol=length(kappas))
for (i in 1:length(kappas)){
for (j in 1:length(thetas)){
errors
}
}
plot_ly(x=1:5, y=1:5, z=matrix(c(1:25), nrow=5,ncol=5), type="mesh3d") %>% add_surface()
errors
kappas <- seq(0.1,3,0.1)
thetas <- seq(0.1,1,0.1)
errors <- matrix(0, nrow=length(thetas), ncol=length(kappas))
for (i in 1:length(kappas)){
for (j in 1:length(thetas)){
errors[j,i] = GOOGL_Opt(c(i*2*j - 0.467514601^2,j,0.467514601,-0.50903932))
}
}
plot_ly(kappas, thetas, errors, type="mesh3d") %>% add_surface()
c(seq(0.1,3,0.1))
kappas <- c(seq(0.1,3,0.1))
thetas <- c(seq(0.1,1,0.1))
errors <- matrix(0, nrow=length(thetas), ncol=length(kappas))
for (i in 1:length(kappas)){
for (j in 1:length(thetas)){
errors[j,i] = GOOGL_Opt(c(i*2*j - 0.467514601^2,j,0.467514601,-0.50903932))
}
}
plot_ly(kappas, thetas, errors, type="mesh3d") %>% add_surface()
erros
errors
z=matrix(c(1:25),nrow=5,ncol=5)
z
z=matrix(c(1:30),nrow=6,ncol=5)
x=c(1:5)
y=c(1:6)
plot_ly()%>%add_surface(x=x,y=y,z=z)
plot_ly()%>%add_surface(x=y,y=x,z=z)
plot_ly()%>%add_surface(x=x,y=y,z=z)
kappas <- c(seq(0.1,3,0.1))
thetas <- c(seq(0.1,1,0.1))
errors <- matrix(0, nrow=length(thetas), ncol=length(kappas))
for (i in 1:length(kappas)){
for (j in 1:length(thetas)){
errors[j,i] = GOOGL_Opt(c(i*2*j - 0.467514601^2,j,0.467514601,-0.50903932))
}
}
plot_ly() %>% add_surface(x=kappas, y=thetas, z=errors)
plot_ly() %>% add_surface(kappas, thetas, errors)
plot_ly() %>% add_surface(kappas, thetas, z=errors)
kappas <- c(seq(0.1,3,0.1))
thetas <- c(seq(0.1,1,0.1))
errors <- matrix(0, nrow=length(kappas), ncol=length(thetas))
for (i in 1:length(kappas)){
for (j in 1:length(thetas)){
errors[i,j] = GOOGL_Opt(c(i*2*j - 0.467514601^2,j,0.467514601,-0.50903932))
}
}
plot_ly() %>% add_surface(kappas, thetas, z=errors)
plot_ly() %>% add_surface(x=kappas, y=thetas, z=errors)
kappas <- c(seq(0.1,3,0.1))
thetas <- c(seq(0.1,1,0.1))
errors <- matrix(0, nrow=length(kappas), ncol=length(thetas))
for (i in 1:length(kappas)){
for (j in 1:length(thetas)){
errors[i,j] = GOOGL_Opt(c(kappas[[i]]*2*thetas[[j]] - 0.467514601^2,thetas[[j]],0.467514601,-0.50903932))
}
}
plot_ly() %>% add_surface(x=kappas, y=thetas, z=errors)
plot_ly() %>% add_surface(x=kappas, y=thetas, z=errors)
kappas <- c(seq(0.1,3,0.1))
thetas <- c(seq(0.1,1,0.1))
errors <- matrix(0, nrow=length(kappas), ncol=length(thetas))
for (i in 1:length(kappas)){
for (j in 1:length(thetas)){
a <- kappas[[i]]*2*thetas[[j]] - 0.467514601^2
print(a)
errors[i,j] = GOOGL_Opt(c(a,thetas[[j]],0.467514601,-0.50903932))
}
}
GOOGL_Opt(c(-0.1986, 0.1, 0.467514, -0.5090392))
x <- c(1:5)
y <- c(1:6)
z<- matrix(0, nrow=5, ncol =6)
for (i in 1:length(x)){
for (j in 1:length(y)){
z[i,j] = x[[i]] * y[[j]]
}
}
plot_ly() %>% add_surface(x=x,y=y,z=z)
kappas <- c(seq(0.1,3,0.1))
thetas <- c(seq(0.1,1,0.1))
errors <- matrix(0, nrow=length(kappas), ncol=length(thetas))
for (i in 1:length(kappas)){
for (j in 1:length(thetas)){
a <- kappas[[i]]*2*thetas[[j]] - 0.467514601^2
errors[i,j] = GOOGL_Opt(c(a,thetas[[j]],0.467514601,-0.50903932))
}
}
plot_ly() %>% add_surface(x=kappas, y=thetas, z=errors)
kappas <- c(seq(0.1,3,0.1))
thetas <- c(seq(0.1,1,0.1))
errors <- matrix(0, nrow=length(kappas), ncol=length(thetas))
for (i in 1:length(kappas)){
for (j in 1:length(thetas)){
print(kappas[[i]])
a <- kappas[[i]]*2*thetas[[j]] - 0.467514601^2
errors[i,j] = GOOGL_Opt(c(a,thetas[[j]],0.467514601,-0.50903932))
}
}
print(dim(errors))
print(length(kappas))
kappas <- c(seq(0.1,3,0.1))
thetas <- c(seq(0,1,0.05))
errors <- matrix(0, nrow=length(kappas), ncol=length(thetas))
for (i in 1:length(kappas)){
for (j in 1:length(thetas)){
print(kappas[[i]])
a <- kappas[[i]]*2*thetas[[j]] - 0.467514601^2
errors[i,j] = GOOGL_Opt(c(a,thetas[[j]],0.467514601,-0.50903932))
}
}
kappas <- c(seq(0.1,3,0.1))
thetas <- c(seq(0.05,1,0.05))
errors <- matrix(0, nrow=length(kappas), ncol=length(thetas))
for (i in 1:length(kappas)){
for (j in 1:length(thetas)){
print(kappas[[i]])
a <- kappas[[i]]*2*thetas[[j]] - 0.467514601^2
errors[i,j] = GOOGL_Opt(c(a,thetas[[j]],0.467514601,-0.50903932))
}
}
kappas <- c(seq(0.1,3,0.1))
thetas <- c(seq(0.05,1,0.05))
errors <- matrix(0, nrow=length(kappas), ncol=length(thetas))
for (i in 1:length(kappas)){
for (j in 1:length(thetas)){
a <- kappas[[i]]*2*thetas[[j]] - 0.467514601^2
errors[i,j] = GOOGL_Opt(c(a,thetas[[j]],0.467514601,-0.50903932))
}
}
plot_ly() %>% add_surface(x=kappas, y=thetas, z=errors)
plot_ly() %>% add_surface(x=thetas, y=kappas, z=errors)
kappas <- c(seq(0.1,3,0.1))
thetas <- c(seq(0.05,1,0.05))
errors <- matrix(0, nrow=length(thetas), ncol=length(kappas))
for (i in 1:length(kappas)){
for (j in 1:length(thetas)){
a <- kappas[[i]]*2*thetas[[j]] - 0.467514601^2
errors[j,i] = GOOGL_Opt(c(a,thetas[[j]],0.467514601,-0.50903932))
}
}
plot_ly() %>% add_surface(x=thetas, y=kappas, z=errors)
x <- c(1:6)
y <- c(1:5)
z<- matrix(0, nrow=6,ncol=5)
for (i in 1:6){
for (j in 1:5){
z[i,j] = x[i] * y[j]
}
}
plot_ly() %>% add_surface(x=x, y=y, z=z)
x <- c(1:6)
y <- c(1:5)
z<- matrix(0, nrow=6,ncol=5)
for (i in 1:6){
for (j in 1:5){
z[i,j] = x[i] * y[j]
}
}
plot_ly() %>% add_surface(x=y, y=x, z=z)
plot_ly() %>% add_surface(x=thetas, y=kappas, z=errors)
kappas <- c(seq(0.1,3,0.1))
thetas <- c(seq(0.05,1,0.05))
errors <- matrix(0, nrow=length(kappas), ncol=length(thetas))
for (i in 1:length(kappas)){
for (j in 1:length(thetas)){
a <- kappas[[i]]*2*thetas[[j]] - 0.467514601^2
errors[i,j] = GOOGL_Opt(c(a,thetas[[j]],0.467514601,-0.50903932))
}
}
plot_ly() %>% add_surface(x=thetas, y=kappas, z=errors)
grid_search <- function(kappa, theta, deltaK, deltaT){
min <- GOOGL_Opt(c(kappa, theta, 0.001, -0.2))
minK <- kappa
minT <- theta
for(dk in c(-deltaK, 0, deltaK)){
for (dt in c(-deltaT, 0, deltaT)){
curr <- GOOGL_Opt(c(kappa + dk, theta + dt, 0.001, -0.2))
if (curr<min){
min <- curr
minK <- kappa + dk
minT <- theta + dt
}
}
}
if (minK<0){
minK = kappa
}
if (minT <0){
minT = theta
}
if (minK == kappa && minT == theta){
deltaK <- deltaK/2
deltaT <- deltaT/2
}
return (c(minK, minT,deltaK, deltaT))
}
# oldk <- 2.040210844 * 2 * 0.053565543 - 0.467514601^2
# oldt <- 0.053565543
# newk <- 2.040210844 * 2 * 0.053565543 - 0.467514601^2
# newt<- 0.053565543
oldk <- 3 * 2 * 1 - 0.467514601^2
oldt <- 1
newk <- 3 * 2 * 1 - 0.467514601^2
newt<- 1
deltaK <- 0.0000000001
deltaT <- 0.01
new_vecs<-c(2,1)
while (deltaK>0.00000000001 && deltaT > 0.00001){
oldk<-newk
oldt<-newt
old_vecs <- c(oldk, oldt, 0.467514601, -0.50903932)
new_vecs <- grid_search(oldk, oldt, deltaK, deltaT)
newk<- new_vecs[[1]]
newt <- new_vecs[[2]]
deltaK <- new_vecs[[3]]
deltaT <- new_vecs[[4]]
print((newk + 0.467514601^2)/(2*newt))
print(newt)
}
print((newk + 0.467514601^2)/(2*newt))
print(newt)
options(digits = 10)
GOOGL_Opt(c(1.841903 * 2 * 1.62875 - 0.467514601^2, 1.62875,0.467514601,-0.50903932))
GOOGL_Opt(c(2.040210844 * 2 * 0.05981554 - 0.467514601^2, 0.053565543,0.467514601,-0.50903932))
kappas <- c(seq(0.1,3,0.1))
thetas <- c(seq(0.05,3,0.05))
errors <- matrix(0, nrow=length(kappas), ncol=length(thetas))
for (i in 1:length(kappas)){
for (j in 1:length(thetas)){
a <- kappas[[i]]*2*thetas[[j]] - 0.467514601^2
errors[i,j] = GOOGL_Opt(c(a,thetas[[j]],0.467514601,-0.50903932))
}
}
plot_ly() %>% add_surface(x=thetas, y=kappas, z=errors)
plot_ly() %>% add_surface(x=thetas, y=kappas, z=errors)
mpg
plot_ly() %>% add_surface(x=thetas, y=kappas, z=errors)
