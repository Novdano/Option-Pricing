minK <- kappa
minT <- theta
for(dk in c(-deltaK, 0, deltaK)){
for (dt in c(-deltaT, 0, deltaT)){
curr <- MSFT_Opt_SV(c(kappa + dk, theta + dt, 0.001, -0.2))
if (curr<min){
if (kappa + dk >0 && theta + dt >0){
min <- curr
minK <- kappa + dk
minT <- theta + dt
}
}
}
}
if (minK == kappa && minT == theta){
deltaK <- deltaK/2
deltaT <- deltaT/2
}
return (c(minK, minT,deltaK, deltaT))
}
oldk <- 0.5
oldt <- 0.7
newk <- 0.5
newt<- 0.7
deltaK <- 0.01
deltaT <- 0.01
new_vecs<-c(2,1)
while (deltaK>0.0001 && deltaT > 0.0001){
oldk<-newk
oldt<-newt
old_vecs <- c(oldk, oldt, oldm, oldr)
new_vecs <- grid_search_SV(oldk, oldt, deltaK, deltaT)
newk<- new_vecs[[1]]
newt <- new_vecs[[2]]
deltaK <- new_vecs[[3]]
deltaT <- new_vecs[[4]]
}
library("NMOF")
options = c(7.7,6.4,5.02,2.79,1.42);
K = c(95,97.5,100,105,110);
S = 100;
MSE <- function(vec1, vec2){
ms <- (vec1-vec2)^2
return ((sum(ms))^0.5)/length(vec1)
}
MSFT_Opt_SV <- function(param_vectors){
a <- param_vectors[[1]]
theta <- param_vectors[[2]]
miu <- param_vectors[[3]]
rho<- param_vectors[[4]]
kappa <- (a + miu^2)/(2*theta)
sv_est = rep(0, length(K))
for (i in 1:length(K)){
sv_est[[i]] <- callHestoncf(S, K[[i]], 1/3, 0.02, 0 ,0.04, theta, rho, kappa, miu)
}
return (MSE(sv_est, options))
}
MSFT_Opt_SABR <- function(param_vectors){
alpha <- param_vectors[[1]]
beta <- param_vectors[[2]]
rho <- param_vectors[[3]]
nu<- param_vectors[[4]]
sv_est = rep(0, length(K))
for (i in 1:length(K)){
sv_est[[i]] <- SABR_MC_Call(S,K[[i]], 0.02 ,alpha, beta, rho, nu, 1/3, 100,100)
}
return (MSE(sv_est, options))
}
grid_search_SV <- function(kappa, theta, deltaK, deltaT){
min <- MSFT_Opt_SV(c(kappa, theta, 0.001, -0.2))
minK <- kappa
minT <- theta
for(dk in c(-deltaK, 0, deltaK)){
for (dt in c(-deltaT, 0, deltaT)){
curr <- MSFT_Opt_SV(c(kappa + dk, theta + dt, 0.001, -0.2))
if (curr<min){
if (kappa + dk >0 && theta + dt >0){
min <- curr
minK <- kappa + dk
minT <- theta + dt
}
}
}
}
if (minK == kappa && minT == theta){
deltaK <- deltaK/2
deltaT <- deltaT/2
}
return (c(minK, minT,deltaK, deltaT))
}
oldk <- 0.5
oldt <- 0.7
newk <- 0.5
newt<- 0.7
deltaK <- 0.01
deltaT <- 0.01
new_vecs<-c(2,1)
while (deltaK>0.0001 && deltaT > 0.0001){
oldk<-newk
oldt<-newt
old_vecs <- c(oldk, oldt, oldm, oldr)
new_vecs <- grid_search_SV(oldk, oldt, deltaK, deltaT)
newk<- new_vecs[[1]]
newt <- new_vecs[[2]]
deltaK <- new_vecs[[3]]
deltaT <- new_vecs[[4]]
}
library("NMOF")
options = c(7.7,6.4,5.02,2.79,1.42);
K = c(95,97.5,100,105,110);
S = 100;
MSE <- function(vec1, vec2){
ms <- (vec1-vec2)^2
return ((sum(ms))^0.5)/length(vec1)
}
MSFT_Opt_SV <- function(param_vectors){
a <- param_vectors[[1]]
theta <- param_vectors[[2]]
miu <- param_vectors[[3]]
rho<- param_vectors[[4]]
kappa <- (a + miu^2)/(2*theta)
sv_est = rep(0, length(K))
for (i in 1:length(K)){
sv_est[[i]] <- callHestoncf(S, K[[i]], 1/3, 0.02, 0 ,0.04, theta, rho, kappa, miu)
}
return (MSE(sv_est, options))
}
MSFT_Opt_SABR <- function(param_vectors){
alpha <- param_vectors[[1]]
beta <- param_vectors[[2]]
rho <- param_vectors[[3]]
nu<- param_vectors[[4]]
sv_est = rep(0, length(K))
for (i in 1:length(K)){
sv_est[[i]] <- SABR_MC_Call(S,K[[i]], 0.02 ,alpha, beta, rho, nu, 1/3, 100,100)
}
return (MSE(sv_est, options))
}
grid_search_SV <- function(kappa, theta, deltaK, deltaT){
min <- MSFT_Opt_SV(c(kappa, theta, 0.001, -0.2))
minK <- kappa
minT <- theta
for(dk in c(-deltaK, 0, deltaK)){
for (dt in c(-deltaT, 0, deltaT)){
curr <- MSFT_Opt_SV(c(kappa + dk, theta + dt, 0.001, -0.2))
if (curr<min){
if (kappa + dk >0 && theta + dt >0){
min <- curr
minK <- kappa + dk
minT <- theta + dt
}
}
}
}
if (minK == kappa && minT == theta){
deltaK <- deltaK/2
deltaT <- deltaT/2
}
return (c(minK, minT,deltaK, deltaT))
}
oldk <- 0.5
oldt <- 0.7
newk <- 0.5
newt<- 0.7
deltaK <- 0.01
deltaT <- 0.01
new_vecs<-c(2,1)
while (deltaK>0.0001 && deltaT > 0.0001){
oldk<-newk
oldt<-newt
new_vecs <- grid_search_SV(oldk, oldt, deltaK, deltaT)
newk<- new_vecs[[1]]
newt <- new_vecs[[2]]
deltaK <- new_vecs[[3]]
deltaT <- new_vecs[[4]]
}
print(newk)
print(newt)
alphas <- seq(0,1,0.01)
Err <- rep(0,length(alphas))
for(i in 1:length(alphas)){
Err[[i]] <-  MSFT_Opt_SABR(c(alphas[[i]], 1, -0.2, 0.4))
}
SABR_MC_Call <- function(S_0, K, r, alpha_0, beta, rho, nu, T, M, N){
payoff <- 0
for(i in 1:M){
S <- S_0
alpha <- alpha_0
for(n in 1:N){
W1 <- rnorm(1)
W2 <- rnorm(1)
S <- S + r*S*(T/N) + alpha*S^beta*sqrt(T/N)*W1*(exp((-r*(T-n*(T/N)))))^(1-beta)
alpha <- alpha + nu*alpha*(rho * W1 + sqrt(1-rho^2)*W2)*sqrt(T/N)
}
if (S>K){
payoff <- payoff + S-K
}
}
return ((payoff/M) * (1+r*(T/N))^-N)
}
SABR_MC_Call(50,30,0.02,0.4,1,0.3,0.4,1/12,100,100)
SABR_MC_Call(50,30,0.02,0.8,1,0.3,0.4,1/12,100,100)
SABR_MC_Call(50,30,0.02,0.4,1,0.6,0.4,1/12,100,100)
SABR_MC_Call(50,30,0.02,0.4,1,0.3,0.8,1/12,100,100)
SV_MC_Call <- function(S_0, K, r, sigma_0, kappa, theta, miu, rho, lambda, T, N, M){
payoff <- rep(0,M)
for (i in 1:M){
s <- S_0
v<- sigma_0
vols = rep(0,N)
for (n in 1:N){
gts = rnorm(1)
gtv = rnorm(1)
s <- s + r*s*(T/N) + sqrt(v) * s * gts * sqrt(T/N)
v <- v + kappa*(theta-v)*(T/N) + miu*sqrt(v)*sqrt(T/N)*(rho*(gts) + sqrt(1-rho^2)*gtv)
#vols[[n]] = v
}
#plot(c(1:N), vols,main = "vol evolution",ylab="Vols",xlab="Time",type="l")
if (s>K){
payoff[[i]] <- s-K
} else{
payoff[[i]] <- 0
}
}
res <- (1 + r * (T/N))^-N * mean(payoff)
return (res)
}
Option_Price <- function(S_0, K, r, sigma, T){
d1 <- (log(S_0/K) + (r + sigma^2/2)*T)/(sigma * sqrt(T))
d2 <- (log(S_0/K) + (r - sigma^2/2)*T)/(sigma * sqrt(T))
res <- S_0 * pnorm(d1) - K*pnorm(d2) * exp(-r * T)
return(res)
}
Vega <- function(S_0, K, r, sigma, T){
d1 <- (log(S_0/K) + (r + sigma^2/2)*T)/(sigma * sqrt(T))
return (S_0 * sqrt(T) * pnorm(d1))
}
Newton_Rhapson_Call <- function(S_0,C_0,K,r,T){
curr_sigma <-100;
diff <- 10000
curr_price <- Option_Price(S_0, K, r, curr_sigma, T)
while (abs(curr_price - C_0)>0.0001) {
curr_sigma <- curr_sigma + ((C_0 - Option_Price(S_0, K, r, curr_sigma, T))/ Vega(S_0, K, r, curr_sigma, T))
curr_price <- Option_Price(S_0, K, r, curr_sigma, T)
}
return(curr_sigma)
}
SV_prices <- rep(0,length(K))
IV <- rep(0,length(K))
for (i in 1:length(K)){
SV_prices[[i]] <- callHestoncf(S, K[[i]], 1/3, 0.02, 0 ,0.04, 0.02578125, -0.2, 0.00625, 0.001)
IV[[i]] <- Newton_Rhapson_Call(S, SV_prices[[i]], K[[i]], 0.02, 1/3)
}
print(IV)
plot(K, IV, "l")
IV_SABR <- function(f, K, t, alpha, beta, rho, nu){
first = alpha/((f*K)^((1-beta)/2) *(1 + ((1-beta)^4)/24 *log(f/K)^2 + ((1-beta^4)/1920)*log(f/K)^4))
z = nu/alpha * ((f*K)^(1-beta)/2) * log(f/K)
chi_z = log((sqrt(1-2*rho*z+z^2) + z - rho)/(1-rho))
last = 1 + (((1-beta)^2/24) * alpha^2/(f*K)^(1-beta) + 1/4 * ((rho*beta*nu*alpa)/((f*K)^((1-beta)/2))) + ((2-3*rho^2)/24)*nu^2)
return (first * (x/chi_z) * last * t)
}
SABR_prices <- rep(0,length(K))
IV_MC <- rep(0,length(K))
IV_CF <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 1000, 1000)
IV[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
IV_CF <- IV_SABR(S  * e^(r*(1/3)),K[[i]],1/3, 0.2042188, 1, -0.2, 0.4)
}
IV_SABR <- function(f, K, t, alpha, beta, rho, nu){
first = alpha/((f*K)^((1-beta)/2) *(1 + ((1-beta)^4)/24 *log(f/K)^2 + ((1-beta^4)/1920)*log(f/K)^4))
z = nu/alpha * ((f*K)^(1-beta)/2) * log(f/K)
chi_z = log((sqrt(1-2*rho*z+z^2) + z - rho)/(1-rho))
last = 1 + (((1-beta)^2/24) * alpha^2/(f*K)^(1-beta) + 1/4 * ((rho*beta*nu*alpa)/((f*K)^((1-beta)/2))) + ((2-3*rho^2)/24)*nu^2)
return (first * (x/chi_z) * last * t)
}
SABR_prices <- rep(0,length(K))
IV_MC <- rep(0,length(K))
IV_CF <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 1000, 1000)
IV[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
IV_CF <- IV_SABR(S  * exp(r*(1/3)),K[[i]],1/3, 0.2042188, 1, -0.2, 0.4)
}
IV_SABR <- function(f, K, t, alpha, beta, rho, nu){
first = alpha/((f*K)^((1-beta)/2) *(1 + ((1-beta)^4)/24 *log(f/K)^2 + ((1-beta^4)/1920)*log(f/K)^4))
z = nu/alpha * ((f*K)^(1-beta)/2) * log(f/K)
chi_z = log((sqrt(1-2*rho*z+z^2) + z - rho)/(1-rho))
last = 1 + (((1-beta)^2/24) * alpha^2/(f*K)^(1-beta) + 1/4 * ((rho*beta*nu*alpha)/((f*K)^((1-beta)/2))) + ((2-3*rho^2)/24)*nu^2)
return (first * (x/chi_z) * last * t)
}
SABR_prices <- rep(0,length(K))
IV_MC <- rep(0,length(K))
IV_CF <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 1000, 1000)
#IV[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
IV_CF <- IV_SABR(S  * exp(r*(1/3)),K[[i]],1/3, 0.2042188, 1, -0.2, 0.4)
}
IV_SABR <- function(f, K, t, alpha, beta, rho, nu){
first = alpha/((f*K)^((1-beta)/2) *(1 + ((1-beta)^4)/24 *log(f/K)^2 + ((1-beta^4)/1920)*log(f/K)^4))
z = nu/alpha * ((f*K)^(1-beta)/2) * log(f/K)
chi_z = log((sqrt(1-2*rho*z+z^2) + z - rho)/(1-rho))
last = 1 + (((1-beta)^2/24) * alpha^2/(f*K)^(1-beta) + 1/4 * ((rho*beta*nu*alpha)/((f*K)^((1-beta)/2))) + ((2-3*rho^2)/24)*nu^2)
return (first * (z/chi_z) * last * t)
}
SABR_prices <- rep(0,length(K))
IV_MC <- rep(0,length(K))
IV_CF <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 1000, 1000)
#IV[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
IV_CF <- IV_SABR(S  * exp(r*(1/3)),K[[i]],1/3, 0.2042188, 1, -0.2, 0.4)
}
print(IV)
plot(K, IV, "l", color = "red")
lines(K ,IV_CF, "l", color = "green")
IV_SABR <- function(f, K, t, alpha, beta, rho, nu){
first = alpha/((f*K)^((1-beta)/2) *(1 + ((1-beta)^4)/24 *log(f/K)^2 + ((1-beta^4)/1920)*log(f/K)^4))
z = nu/alpha * ((f*K)^(1-beta)/2) * log(f/K)
chi_z = log((sqrt(1-2*rho*z+z^2) + z - rho)/(1-rho))
last = 1 + (((1-beta)^2/24) * alpha^2/(f*K)^(1-beta) + 1/4 * ((rho*beta*nu*alpha)/((f*K)^((1-beta)/2))) + ((2-3*rho^2)/24)*nu^2)
return (first * (z/chi_z) * last * t)
}
SABR_prices <- rep(0,length(K))
IV_MC <- rep(0,length(K))
IV_CF <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 1000, 1000)
IV_MC[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
IV_CF[[i]] <- IV_SABR(S  * exp(r*(1/3)),K[[i]],1/3, 0.2042188, 1, -0.2, 0.4)
}
print(IV)
plot(K, IV_MC, "l", color = "red")
lines(K ,IV_CF, "l", color = "green")
IV_SABR <- function(f, K, t, alpha, beta, rho, nu){
first = alpha/((f*K)^((1-beta)/2) *(1 + ((1-beta)^4)/24 *log(f/K)^2 + ((1-beta^4)/1920)*log(f/K)^4))
z = nu/alpha * ((f*K)^(1-beta)/2) * log(f/K)
chi_z = log((sqrt(1-2*rho*z+z^2) + z - rho)/(1-rho))
last = 1 + (((1-beta)^2/24) * alpha^2/(f*K)^(1-beta) + 1/4 * ((rho*beta*nu*alpha)/((f*K)^((1-beta)/2))) + ((2-3*rho^2)/24)*nu^2)
return (first * (z/chi_z) * last * t)
}
SABR_prices <- rep(0,length(K))
IV_MC <- rep(0,length(K))
IV_CF <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 1000, 1000)
IV_MC[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
IV_CF[[i]] <- IV_SABR(S  * exp(r*(1/3)),K[[i]],1/3, 0.2042188, 1, -0.2, 0.4)
}
print(IV)
plot(K, IV_MC, "l", col = "red")
lines(K ,IV_CF, "l", col = "green")
IV_SABR <- function(f, K, t, alpha, beta, rho, nu){
first = alpha/((f*K)^((1-beta)/2) *(1 + ((1-beta)^4)/24 *log(f/K)^2 + ((1-beta^4)/1920)*log(f/K)^4))
z = nu/alpha * ((f*K)^(1-beta)/2) * log(f/K)
chi_z = log((sqrt(1-2*rho*z+z^2) + z - rho)/(1-rho))
last = 1 + (((1-beta)^2/24) * alpha^2/(f*K)^(1-beta) + 1/4 * ((rho*beta*nu*alpha)/((f*K)^((1-beta)/2))) + ((2-3*rho^2)/24)*nu^2)
return (first * (z/chi_z) * last * t)
}
SABR_prices <- rep(0,length(K))
IV_MC <- rep(0,length(K))
IV_CF <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 1000, 1000)
IV_MC[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
IV_CF[[i]] <- IV_SABR(S  * exp(r*(1/3)),K[[i]],1/3, 0.2042188, 1, -0.2, 0.4)
}
print(IV_MC)
print(IV_CF)
plot(K, IV_MC, "l", col = "red")
lines(K ,IV_CF, "l", col = "green")
IV_SABR <- function(f, K, t, alpha, beta, rho, nu){
first = alpha/((f*K)^((1-beta)/2) *(1 + ((1-beta)^4)/24 *log(f/K)^2 + ((1-beta^4)/1920)*log(f/K)^4))
z = nu/alpha * ((f*K)^(1-beta)/2) * log(f/K)
chi_z = log((sqrt(1-2*rho*z+z^2) + z - rho)/(1-rho))
last = 1 + (((1-beta)^2/24) * alpha^2/(f*K)^(1-beta) + 1/4 * ((rho*beta*nu*alpha)/((f*K)^((1-beta)/2))) + ((2-3*rho^2)/24)*nu^2)
return (first * (z/chi_z) * last * t)
}
SABR_prices <- rep(0,length(K))
IV_MC <- rep(0,length(K))
IV_CF <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 1000, 1000)
IV_MC[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
IV_CF[[i]] <- IV_SABR(S  * exp(0.02*(1/3)),K[[i]],1/3, 0.2042188, 1, -0.2, 0.4)
}
print(IV_MC)
print(IV_CF)
plot(K, IV_MC, "l", col = "red")
lines(K ,IV_CF, "l", col = "green")
IV_SABR <- function(f, K, t, alpha, beta, rho, nu){
first = alpha/((f*K)^((1-beta)/2) *(1 + (((1-beta)^2)/24) *(log(f/K))^2 + ((1-beta^4)/1920)*log(f/K)^4))
z = nu/alpha * ((f*K)^((1-beta)/2)) * log(f/K)
chi_z = log((sqrt(1-2*rho*z+z^2) + z - rho)/(1-rho))
last = 1 + (((1-beta)^2/24) * alpha^2/((f*K)^(1-beta)) + 1/4 * ((rho*beta*nu*alpha)/((f*K)^((1-beta)/2))) + ((2-3*rho^2)/24)*nu^2)
return (first * (z/chi_z) * last * t)
}
SABR_prices <- rep(0,length(K))
IV_MC <- rep(0,length(K))
IV_CF <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 1000, 1000)
IV_MC[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
IV_CF[[i]] <- IV_SABR(S  * exp(0.02*(1/3)),K[[i]],1/3, 0.2042188, 1, -0.2, 0.4)
}
print(IV_MC)
print(IV_CF)
plot(K, IV_MC, "l", col = "red")
lines(K ,IV_CF, "l", col = "green")
IV_SABR <- function(f, K, t, alpha, beta, rho, nu){
first = alpha/((f*K)^((1-beta)/2) *(1 + (((1-beta)^2)/24) *(log(f/K))^2 + ((1-beta^4)/1920)*log(f/K)^4))
z = nu/alpha * ((f*K)^((1-beta)/2)) * log(f/K)
chi_z = log((sqrt(1-2*rho*z+z^2) + z - rho)/(1-rho))
last = 1 + (((1-beta)^2/24) * alpha^2/((f*K)^(1-beta)) + 1/4 * ((rho*beta*nu*alpha)/((f*K)^((1-beta)/2))) + ((2-3*rho^2)/24)*nu^2)
return (first * (z/chi_z) * last * t)
}
SABR_prices <- rep(0,length(K))
IV_MC <- rep(0,length(K))
IV_CF <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 1000, 1000)
IV_MC[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
IV_CF[[i]] <- IV_SABR(S  * exp(0.02*(1/3)),K[[i]],1/3, 0.2042188, 1, -0.2, 0.4)
}
print(IV_MC)
print(IV_CF)
plot(K ,IV_CF, "l", col = "green")
IV_SABR <- function(f, K, t, alpha, beta, rho, nu){
first = alpha/((f*K)^((1-beta)/2) *(1 + ((1-beta)^4)/24 *log(f/K)^2 + ((1-beta^4)/1920)*log(f/K)^4))
z = nu/alpha * ((f*K)^(1-beta)/2) * log(f/K)
chi_z = log((sqrt(1-2*rho*z+z^2) + z - rho)/(1-rho))
last = 1 + (((1-beta)^2/24) * alpha^2/(f*K)^(1-beta) + 1/4 * ((rho*beta*nu*alpa)/((f*K)^((1-beta)/2))) + ((2-3*rho^2)/24)*nu^2)
return (first * (x/chi_z) * last * t)
}
View(grid_search_dumdum)
OTM <- read.xlsx("MSFT_HIST_95Call_081718.xlsx")
library("NMOF")
library("xlsx")
install.packages("xlsx")
library("NMOF")
library("xlsx")
install.packages("xlsx")
library("NMOF")
library("xlsx")
library("NMOF")
library("xlsx")
library("NMOF")
library("xlsx")
library.install("rJava")
install.packages("rJava")
install.packages("xlsxjars")
library("NMOF")
library("xlsx")
install.packages("rJava")
install.packages("xlsxjars")
install.packages("xlsx")
install.packages("rJava")
install.packages("xlsxjars")
install.packages("xlsx")
library("NMOF")
library("xlsx")
IV_SABR <- function(f, K, t, alpha, beta, rho, nu){
first = alpha/((f*K)^((1-beta)/2) *(1 + (((1-beta)^2)/24) *(log(f/K))^2 + ((1-beta^4)/1920)*log(f/K)^4))
z = (nu/alpha) * ((f*K)^((1-beta)/2)) * log(f/K)
chi_z = log((sqrt(1-2*rho*z+z^2) + z - rho)/(1-rho))
last = 1 + (((1-beta)^2/24) * alpha^2/((f*K)^(1-beta)) + (1/4) * ((rho*beta*nu*alpha)/((f*K)^((1-beta)/2))) + ((2-3*rho^2)/24)*nu^2)*t
return (first * (z/chi_z) * last)
}
SABR_prices <- rep(0,length(K))
IV_MC <- rep(0,length(K))
IV_CF <- rep(0,length(K))
for (i in 1:length(K)){
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 1000, 1000)
IV_MC[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
IV_CF[[i]] <- IV_SABR(S  * exp(0.02*(1/3)),K[[i]],1/3, 0.2042188, 1, -0.2, 0.4)
}
print(IV_MC)
print(IV_CF)
plot(K ,IV_CF, "l", col = "green")
IV_SABR <- function(f, K, t, alpha, beta, rho, nu){
first = alpha/((f*K)^((1-beta)/2) *(1 + (((1-beta)^2)/24) *(log(f/K))^2 + ((1-beta^4)/1920)*log(f/K)^4))
z = (nu/alpha) * ((f*K)^((1-beta)/2)) * log(f/K)
chi_z = log((sqrt(1-2*rho*z+z^2) + z - rho)/(1-rho))
last = 1 + (((1-beta)^2/24) * alpha^2/((f*K)^(1-beta)) + (1/4) * ((rho*beta*nu*alpha)/((f*K)^((1-beta)/2))) + ((2-3*rho^2)/24)*nu^2)*t
return (first * (z/chi_z) * last)
}
SABR_prices <- rep(0,length(K))
IV_MC <- rep(0,length(K))
IV_CF <- rep(0,length(K))
for (i in 1:length(K)){0
SABR_prices[[i]] <- SABR_MC_Call(S,K[[i]],0.02,  0.2042188, 1, -0.2, 0.4, 1/3, 10000, 10000)
IV_MC[[i]] <- Newton_Rhapson_Call(S, SABR_prices[[i]], K[[i]], 0.02, 1/3)
IV_CF[[i]] <- IV_SABR(S  * exp(0.02*(1/3)),K[[i]],1/3, 0.2042188, 1, -0.2, 0.4)
}
library("NMOF")
library("xlsx")
library("NMOF")
library("rJava")
library("NMOF")
library("rJava")
library("NMOF")
library("rJava")
library("NMOF")
library("rJava")
library("NMOF")
library("rJava")
library("NMOF")
library("rJava")
library("NMOF")
library("rJava")
